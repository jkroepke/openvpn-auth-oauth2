name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    tags:
      - 'v*'
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-24.04
    name: Build & Test
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: 'go.mod'

      - run: go build
      - run: go test ./... -timeout 20s -race -covermode=atomic -coverprofile=coverage.out -coverpkg=./...
      - run: go test ./... -timeout 20s -bench . -benchmem -count 3

      - name: Write gpg sign key
        if: env.GPG_KEY != null
        run: echo "$GPG_KEY" > "$GPG_KEY_PATH"
        env:
          GPG_KEY_PATH: "${{ secrets.GPG_KEY_PATH }}"
          GPG_KEY: ${{ secrets.GPG_KEY }}

      - name: go build (with goreleaser)
        uses: goreleaser/goreleaser-action@90a3faa9d0182683851fbfa97ca1a2cb983bfca3 # v6.2.1
        with:
          # renovate: github=goreleaser/goreleaser
          version: v2.8.1
          args: release --snapshot
        env:
          GITHUB_TOKEN: ""
          GPG_KEY_PATH: ""

      - uses: codecov/codecov-action@0565863a31f2c772f9f0395002a31e3f06189574 # v5.4.0
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: dists
          path: dist/
  lint:
    name: lint
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: 'go.mod'

      - run: go mod tidy -diff

      - name: golangci-lint
        uses: golangci/golangci-lint-action@55c2c1448f86e01eaae002a5a3a9624417608d84 # v6.5.2
        with:
          # renovate: github=golangci/golangci-lint
          version: v1.64.8
          args: "--max-same-issues=0"

  super-lint:
    name: super-lint
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Lint Code Base
        uses: super-linter/super-linter/slim@4e8a7c2bf106c4c766c816b35ec612638dc9b6b2 # v7.3.0
        env:
          EDITORCONFIG_FILE_NAME: .editorconfig-checker.json
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MULTI_STATUS: false
          LINTER_RULES_PATH: .
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_BASH: true
          VALIDATE_BASH_EXEC: true
          VALIDATE_EDITORCONFIG: true
          VALIDATE_ENV: true
          # VALIDATE_GO_RELEASER: true
          VALIDATE_GITHUB_ACTIONS: true
          VALIDATE_HTML: true
          VALIDATE_JSON: true
          VALIDATE_NATURAL_LANGUAGE: true
          # VALIDATE_MARKDOWN: false
          VALIDATE_RENOVATE: true
          VALIDATE_SHELL_SHFMT: true
          VALIDATE_XML: true
          VALIDATE_YAML: true

  publish:
    name: Publish package
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs:
      - build
      - lint
      - super-lint
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: 'go.mod'

      - name: Write gpg sign key
        run: echo "$GPG_KEY" > "$GPG_KEY_PATH"
        env:
          GPG_KEY_PATH: "${{ secrets.GPG_KEY_PATH }}"
          GPG_KEY: ${{ secrets.GPG_KEY }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@90a3faa9d0182683851fbfa97ca1a2cb983bfca3 # v6.2.1
        with:
          # renovate: github=goreleaser/goreleaser
          version: v2.8.1
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ github.ref_name }}
          NFPM_OPENVPN-AUTH-OAUTH2_PASSPHRASE: ${{ secrets.NFPM_PASSPHRASE }}
          GPG_KEY_PATH: ${{ secrets.GPG_KEY_PATH }}

      - name: GPG configuration
        run: |
          mkdir -p "$HOME/.gnupg"
          chmod 0700 "$HOME/.gnupg"
          echo "use-agent" > "$HOME/.gnupg/gpg.conf"
          echo "pinentry-program $GITHUB_WORKSPACE/.github/scripts/pinentry.sh" > "$HOME/.gnupg/gpg-agent.conf"
          echo "$GPG_PASSPHRASE" > "$HOME/.gnupg/passphrase"
          gpgconf --launch gpg-agent
          echo "$GPG_PRIVATE_KEY" | gpg --import
          echo "$GPG_KEY_ID:6:" | gpg --import-ownertrust
        env:
          GPG_KEY_ID: ${{ vars.GPG_KEY_ID }}
          GPG_PASSPHRASE: ${{ secrets.NFPM_PASSPHRASE }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_KEY_PATH }}

      - name: Release APT repository
        run: |
          set -x
          gh release download "${GITHUB_REF_NAME}" -p "*.deb" -D tmp
          pushd tmp
            apt-ftparchive packages . | tee Packages | xz > Packages.xz
            apt-ftparchive release . > Release
            gpg --clearsign -o InRelease Release
            gpg --armor --detach-sign --sign -o Release.gpg Release
            gh release upload "${GITHUB_REF_NAME}" InRelease Packages Packages.xz Release Release.gpg --clobber
          popd
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

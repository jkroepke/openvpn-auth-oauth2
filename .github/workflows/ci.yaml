name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    tags:
      - 'v*'
    branches:
      - main

permissions: {}

jobs:
  build:
    runs-on: ubuntu-24.04
    name: Build & Test
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: 'go.mod'
          cache: "${{ github.actor != 'renovate[bot]' && github.actor != 'mend[bot]' }}"

      - run: go build
      - run: go test ./... -timeout 20s -race -covermode=atomic -coverprofile=coverage.out -coverpkg=./...
      - run: go test ./... -timeout 20s -run='^$' -bench=. -benchmem -count 3

      - uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  goreleaser:
    runs-on: ubuntu-24.04
    name: Test goreleaser
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: 'go.mod'
          cache: "${{ github.actor != 'renovate[bot]' && github.actor != 'mend[bot]' }}"

      - uses: anchore/sbom-action/download-syft@f8bdd1d8ac5e901a77a92f111440fdb1b593736b # v0.20.6

      - name: Write gpg sign key
        if: env.GPG_KEY != null
        run: echo "$GPG_KEY" > "$GPG_KEY_PATH"
        env:
          GPG_KEY_PATH: "${{ secrets.GPG_KEY_PATH }}"
          GPG_KEY: ${{ secrets.GPG_KEY }}

      - name: go build (with goreleaser)
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
        with:
          # renovate: github=goreleaser/goreleaser
          version: v2.12.5
          args: release --snapshot
        env:
          GITHUB_TOKEN: ""
          GPG_KEY_PATH: ""

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: dists
          path: dist/
  lint:
    name: lint
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: 'go.mod'
          cache: "${{ github.actor != 'renovate[bot]' && github.actor != 'mend[bot]' }}"

      - run: go mod tidy -diff

      - name: golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          # renovate: github=golangci/golangci-lint
          version: v2.5.0
          args: "--max-same-issues=0"

  super-lint:
    name: super-lint
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Lint Code Base
        uses: super-linter/super-linter/slim@7bba2eeb89d01dc9bfd93c497477a57e72c83240 # v8.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MULTI_STATUS: false
          LINTER_RULES_PATH: .
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_BASH: true
          VALIDATE_BASH_EXEC: true
          VALIDATE_EDITORCONFIG: true
          VALIDATE_ENV: true
          # VALIDATE_GO_RELEASER: true
          VALIDATE_GITHUB_ACTIONS: true
          VALIDATE_HTML: true
          VALIDATE_JSON: true
          VALIDATE_NATURAL_LANGUAGE: true
          # VALIDATE_MARKDOWN: false
          VALIDATE_RENOVATE: true
          VALIDATE_SHELL_SHFMT: true
          VALIDATE_XML: true
          VALIDATE_YAML: true

  publish:
    name: Publish package
    if: >-
      github.event_name == 'push'
      && startsWith(github.ref, 'refs/tags/v')
    needs:
      - build
      - lint
      - goreleaser
      - super-lint
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: 'go.mod'
          cache: true

      - uses: anchore/sbom-action/download-syft@f8bdd1d8ac5e901a77a92f111440fdb1b593736b # v0.20.6

      - name: GPG configuration
        run: |-
          echo "$GPG_KEY" > "$GPG_KEY_PATH"
          mkdir -p "$HOME/.gnupg"
          chmod 0700 "$HOME/.gnupg"
          echo "use-agent" > "$HOME/.gnupg/gpg.conf"
          echo "pinentry-mode loopback" >> "$HOME/.gnupg/gpg.conf"
          echo "allow-loopback-pinentry" > "$HOME/.gnupg/gpg-agent.conf"
          echo "max-cache-ttl 86400" >> "$HOME/.gnupg/gpg-agent.conf"
          echo "default-cache-ttl 86400" >> "$HOME/.gnupg/gpg-agent.conf"
          gpgconf --kill gpg-agent
          gpgconf --launch gpg-agent
          echo "$GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 --import "$GPG_KEY_PATH"
          echo "1F34F95B4F30BC5B06E0D7CC3F619F17002790D8:6:" | gpg --import-ownertrust
        env:
          GPG_KEY_ID: ${{ vars.GPG_KEY_ID }}
          GPG_KEY: ${{ secrets.GPG_KEY }}
          GPG_PASSPHRASE: ${{ secrets.NFPM_PASSPHRASE }}
          GPG_KEY_PATH: "${{ secrets.GPG_KEY_PATH }}"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
        with:
          # renovate: github=goreleaser/goreleaser
          version: v2.12.5
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ github.ref_name }}
          NFPM_OPENVPN-AUTH-OAUTH2_PASSPHRASE: ${{ secrets.NFPM_PASSPHRASE }}
          GPG_KEY_PATH: ${{ secrets.GPG_KEY_PATH }}

      - name: Release APT repository
        run: |
          set -x
          gh release download "${GITHUB_REF_NAME}" -p "*.deb" -D tmp
          pushd tmp
            apt-ftparchive packages . | tee Packages | xz > Packages.xz
            apt-ftparchive release . > Release
            gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --clearsign -o InRelease Release
            gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --armor --detach-sign --sign -o Release.gpg Release
            gh release upload "${GITHUB_REF_NAME}" InRelease Packages Packages.xz Release Release.gpg --clobber
          popd
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.NFPM_PASSPHRASE }}

      - name: Publish Release
        run: gh release edit "${GITHUB_REF_NAME}" --draft=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-checksums: ./dist/checksums.txt
